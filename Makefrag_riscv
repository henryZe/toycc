CC = gcc

CFLAGS = -std=c2x -g -O0 -fno-common
CFLAGS += -Wall -Wextra -Werror
CFLAGS += -DDEBUG

TARGET = toycc

INCLUDE = -I. -Iparser -Ipreprocessor
TEST_INCLUDE = -Itest

HEADERFILES = \
	toycc.h \
	type.h \
	hashmap.h \
	parser/declarator.h \
	parser/initializer.h \
	parser/parser.h \
	parser/scope.h \
	preprocessor/preprocessor.h \

SRCFILES = \
	utils.c \
	unicode.c \
	string.c \
	hashmap.c \
	tokenize.c \
	type.c \
	preprocessor/predefined_macro.c \
	preprocessor/preprocess.c \
	parser/common.c \
	parser/initializer.c \
	parser/declarator.c \
	parser/scope.c \
	parser/parser.c \
	codegen.c \
	main.c \

TEST_SRCS = \
	alignof.c \
	arith.c \
	cast.c \
	comp_lit.c \
	compat.c \
	const.c \
	constexpr.c \
	control.c \
	decl.c \
	enum.c \
	extern.c \
	float.c \
	function.c \
	initializer.c \
	literal.c \
	pointer.c \
	sizeof.c \
	string.c \
	struct.c \
	typedef.c \
	union.c \
	usualconv.c \
	variable.c \
	macro.c \
	stdhdr.c \
	varargs.c \
	bitfield.c \
	unicode.c \
	line.c \
	typeof.c \
	builtin.c \
	generic.c \
	asm.c \
	offsetof.c \
	commonsym.c \
	tls.c \
	alloca.c \
	vla.c \
	pragma-once.c \
	atomic.c \
	attribute.c \

# target
output/%.o: %.c $(HEADERFILES)
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) $(INCLUDE) -c $< -o $@

SRC_OBJFILES := $(patsubst %.c, output/%.o, $(SRCFILES))
output/$(TARGET): $(SRC_OBJFILES)
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) $(SRC_OBJFILES) -o $@
	cp -r include/ output/

# test
output/test/lib.o: test/lib.c
	@mkdir -p $(@D)
	$(CC) -c test/lib.c -o $@

output/test/%: test/%.c output/$(TARGET) output/test/lib.o
	@mkdir -p $(@D)
	output/$(TARGET) $(TEST_INCLUDE) $< output/test/lib.o -o $@

TESTS = $(patsubst %.c, output/test/%, $(TEST_SRCS))
TEST_DRV = test/driver.sh
test: $(TESTS)
	for i in $^; do echo $$i; $$i || exit 1; echo; done
	@bash $(TEST_DRV) output/$(TARGET)

# self-host
output/selfhost/$(TARGET): $(SRCFILES) output/$(TARGET) $(HEADERFILES)
	@mkdir -p $(@D)
	output/$(TARGET) -static $(INCLUDE) $(SRCFILES) -o $@
	cp -r include/ output/selfhost/

selfhost: output/selfhost/$(TARGET)

# selfhost test
output/selfhost/test/%: test/%.c output/selfhost/$(TARGET) output/test/lib.o
	@mkdir -p $(@D)
	output/selfhost/$(TARGET) $(TEST_INCLUDE) $< output/test/lib.o -o $@

SELFHOST_TESTS = $(patsubst output/test/%, output/selfhost/test/%, $(TESTS))
selfhost_test: $(SELFHOST_TESTS)
	for i in $^; do echo $$i; ./$$i || exit 1; echo; done

all: test selfhost_test

THIRDPARTY_TEST = $(patsubst %, test/thirdparty/%, $(THIRDPARTY))
thirdparty_test: $(THIRDPARTY_TEST) output/$(TARGET)
	for i in $(THIRDPARTY_TEST); do sh $$i || exit 1; done

clean:
	rm -rf output

.PHONY: clean test selfhost selfhost_test all
